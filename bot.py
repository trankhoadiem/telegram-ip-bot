import logging
import requests
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from yt_dlp import YoutubeDL
import os

# Enable logging
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# Bot token from environment variable or replace with your token
TOKEN = os.getenv("TOKEN", "YOUR_BOT_TOKEN")  # Thay th·∫ø v·ªõi token c·ªßa b·∫°n

# TikWM API for TikTok downloading
TIKWM_API = "https://www.tikwm.com/api/"
HEADERS = {
    "User-Agent": "Mozilla/5.0",
    "Referer": "https://www.tikwm.com/"
}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚ú® **Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi BOT** ‚ú®\n\n"
        "ü§ñ C√¥ng c·ª• t·∫£i video t·ª´ TikTok, YouTube v√† nh·∫°c SoundCloud.\n\n"
        "üí° G√µ /help ƒë·ªÉ xem l·ªánh kh·∫£ d·ª•ng."
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üìñ L·ªánh c√≥ s·∫µn:\n\n"
        "/start - B·∫Øt ƒë·∫ßu\n"
        "/help - Tr·ª£ gi√∫p\n"
        "/tiktok <link> - T·∫£i video t·ª´ TikTok\n"
        "/yt <link> - T·∫£i video t·ª´ YouTube\n"
        "/sc <link> - T·∫£i nh·∫°c t·ª´ SoundCloud"
    )

async def download_youtube(url: str, chat_id: int, context: ContextTypes.DEFAULT_TYPE):
    try:
        ydl_opts = {
            'format': 'bestvideo[ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]/best',
            'outtmpl': f'video_{chat_id}.%(ext)s',
            'merge_output_format': 'mp4',
        }
        with YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=True)
            filename = ydl.prepare_filename(info)
            return filename
    except Exception as e:
        logger.error(f"Error downloading YouTube video: {e}")
        return None

async def download_tiktok(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("üëâ D√πng: /tiktok <link TikTok>")
        return
    link = context.args[0].strip()
    waiting_msg = await update.message.reply_text("‚è≥ ƒêang x·ª≠ l√Ω link TikTok, vui l√≤ng ch·ªù...")
    try:
        res = requests.post(TIKWM_API, data={"url": link}, headers=HEADERS, timeout=20)
        data_json = res.json()
        if data_json.get("code") != 0 or "data" not in data_json:
            await waiting_msg.edit_text("‚ùå Kh√¥ng t·∫£i ƒë∆∞·ª£c TikTok. Vui l√≤ng ki·ªÉm tra l·∫°i link!")
            return
        data = data_json["data"]
        title = data.get("title", "TikTok")
        if data.get("hdplay") or data.get("play"):
            url = data.get("hdplay") or data.get("play")
            await waiting_msg.delete()
            await update.message.reply_video(url, caption=f"üé¨ {title} (ch·∫•t l∆∞·ª£ng cao nh·∫•t)")
        elif data.get("images"):
            await waiting_msg.edit_text(f"üñº {title}\n\nƒêang g·ª≠i ·∫£nh g·ªëc...")
            for img_url in data["images"]:
                await update.message.reply_photo(img_url)
        else:
            await waiting_msg.edit_text("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y video/·∫£nh trong link n√†y.")
    except Exception as e:
        await waiting_msg.edit_text(f"‚ö†Ô∏è L·ªói khi t·∫£i TikTok: {e}")

async def download_music(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("üëâ D√πng: /sc <link SoundCloud>")
        return
    link = context.args[0].strip()
    waiting_msg = await update.message.reply_text("‚è≥ ƒêang x·ª≠ l√Ω link SoundCloud, vui l√≤ng ch·ªù...")
    try:
        scdl_url = f"https://taivideoaz.com/tai-nhac-soundcloud/?url={link}"
        await waiting_msg.delete()
        await update.message.reply_text(f"T·∫£i nh·∫°c t·ª´ SoundCloud t·∫°i: {scdl_url}")
    except Exception as e:
        await waiting_msg.edit_text(f"‚ö†Ô∏è L·ªói khi t·∫£i t·ª´ SoundCloud: {e}")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message.text
    chat_id = update.message.chat_id
    youtube_regex = r'(https?://(?:www\.)?(?:youtube\.com/watch\?v=|youtu\.be/)[^\s]+)'
    youtube_url = re.search(youtube_regex, message)

    if youtube_url:
        await update.message.reply_text("‚è≥ ƒêang t·∫£i video YouTube...")
        filename = await download_youtube(youtube_url.group(0), chat_id, context)
        if filename and os.path.exists(filename):
            with open(filename, 'rb') as video:
                await update.message.reply_video(video=video)
            os.remove(filename)
        else:
            await update.message.reply_text("‚ùå Kh√¥ng t·∫£i ƒë∆∞·ª£c video YouTube.")

async def welcome(update: Update, context: ContextTypes.DEFAULT_TYPE):
    for member in update.message.new_chat_members:
        await update.message.reply_text(
            f"üéâ Ch√†o m·ª´ng {member.full_name} ƒë√£ tham gia nh√≥m {update.message.chat.title}!"
        )

def main():
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("tiktok", download_tiktok))
    app.add_handler(CommandHandler("sc", download_music))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(MessageHandler(filters.StatusUpdate.NEW_CHAT_MEMBERS, welcome))
    app.run_polling()

if __name__ == "__main__":
    main()
