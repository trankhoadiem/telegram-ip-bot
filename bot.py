from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import requests
import os
import sys
import openai
import google.generativeai as genai
import asyncio
import logging
from typing import List, Optional

# ==== TOKEN & API KEYS ====
# L∆∞u √Ω: ƒë·∫∑t bi·∫øn m√¥i tr∆∞·ªùng trong Railway: TOKEN, OPENAI_API_KEY, XAI_API_KEY, GOOGLE_API_KEY
# N·∫øu b·∫°n upload file OPENAI_API_KEY.txt / XAI_API_KEY.txt / GOOGLE_API_KEY.txt v√†o /mnt/data,
# code s·∫Ω c·ªë load t·ª´ ƒë√≥ n·∫øu ENV kh√¥ng c√≥.
TOKEN = os.environ.get("TOKEN")
OPENAI_API_KEY = os.environ.get("OPENAI_API_KEY")
XAI_API_KEY = os.environ.get("XAI_API_KEY")
GOOGLE_API_KEY = os.environ.get("GOOGLE_API_KEY")   # Gemini key

# ==== ADMIN ====
ADMIN_USERNAME = "DuRinn_LeTuanDiem"

# -------------------
# logging
# -------------------
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# -------------------
# helper: load from /mnt/data fallback if ENV missing
# -------------------
def _load_key_from_files(env_name: str, filenames: List[str]) -> Optional[str]:
    v = os.environ.get(env_name)
    if v:
        return v
    for fn in filenames:
        p = f"/mnt/data/{fn}"
        try:
            if os.path.exists(p):
                with open(p, "r") as f:
                    val = f.read().strip()
                    if val:
                        logger.info(f"Loaded {env_name} from {p}")
                        return val
        except Exception:
            pass
    return None

if not OPENAI_API_KEY:
    OPENAI_API_KEY = _load_key_from_files("OPENAI_API_KEY", ["OPENAI_API_KEY.txt", "OPENAI_KEY.txt", "OPENAI_API_KEY.TXT"])
if not XAI_API_KEY:
    XAI_API_KEY = _load_key_from_files("XAI_API_KEY", ["XAI_API_KEY.txt", "XAI_KEY.txt", "XAI_API_KEY.TXT"])
if not GOOGLE_API_KEY:
    GOOGLE_API_KEY = _load_key_from_files("GOOGLE_API_KEY", ["GOOGLE_API_KEY.txt", "GOOGLE_KEY.txt", "GOOGLE_API_KEY.TXT"])
if not TOKEN:
    TOKEN = _load_key_from_files("TOKEN", ["TOKEN.txt", "token.txt"])

def is_admin(update: Update):
    user = update.effective_user
    return user and user.username == ADMIN_USERNAME

# -------------------
# delete helpers
# -------------------
async def delete_after_delay(context: ContextTypes.DEFAULT_TYPE, chat_id: int, msg_ids: List[int], delay: int = 300):
    """X√≥a message ids sau `delay` gi√¢y (m·∫∑c ƒë·ªãnh 300s = 5 ph√∫t)."""
    await asyncio.sleep(delay)
    for mid in msg_ids:
        try:
            await context.bot.delete_message(chat_id=chat_id, message_id=mid)
        except Exception as e:
            logger.debug(f"Can't delete message {mid} in {chat_id}: {e}")

# -------------------
# API wrappers (ƒë·ªÅu g·ªçi trong thread ƒë·ªÉ ko block loop)
# -------------------
async def chat_gpt_async(query: str) -> str:
    if not OPENAI_API_KEY:
        return "‚ùå GPT l·ªói: OPENAI_API_KEY ch∆∞a ƒë∆∞·ª£c ƒë·∫∑t."
    try:
        openai.api_key = OPENAI_API_KEY
        def sync_call():
            return openai.ChatCompletion.create(
                model="gpt-3.5-turbo",
                messages=[{"role":"user","content":query}],
                timeout=30
            )
        resp = await asyncio.to_thread(sync_call)
        return resp["choices"][0]["message"]["content"]
    except Exception as e:
        logger.exception("OpenAI error")
        return f"‚ö†Ô∏è GPT l·ªói: {e}"

async def chat_grok_async(query: str) -> str:
    if not XAI_API_KEY:
        return "‚ùå GROK l·ªói: XAI_API_KEY ch∆∞a ƒë∆∞·ª£c ƒë·∫∑t."
    try:
        def sync_call():
            url = "https://api.x.ai/v1/chat/completions"
            headers = {"Authorization": f"Bearer {XAI_API_KEY}"}
            payload = {"model":"grok-2","messages":[{"role":"user","content":query}]}
            r = requests.post(url, headers=headers, json=payload, timeout=30)
            r.raise_for_status()
            return r.json()
        data = await asyncio.to_thread(sync_call)
        # defensive
        try:
            return data["choices"][0]["message"]["content"]
        except Exception:
            logger.debug("Unexpected grok response: %s", data)
            return f"‚ö†Ô∏è GROK tr·∫£ v·ªÅ format l·∫°: {data}"
    except Exception as e:
        logger.exception("Grok error")
        return f"‚ö†Ô∏è GROK l·ªói: {e}"

async def chat_gemini_async(query: str) -> str:
    if not GOOGLE_API_KEY:
        return "‚ùå GEMINI l·ªói: GOOGLE_API_KEY ch∆∞a ƒë∆∞·ª£c ƒë·∫∑t."
    try:
        def sync_call():
            genai.configure(api_key=GOOGLE_API_KEY)
            model = genai.GenerativeModel("gemini-1.5-flash")
            resp = model.generate_content(query)
            return getattr(resp, "text", str(resp))
        text = await asyncio.to_thread(sync_call)
        return text
    except Exception as e:
        logger.exception("Gemini error")
        return f"‚ö†Ô∏è GEMINI l·ªói: {e}"

# -------------------
# Handlers
# -------------------

# 1) Xo√° ngay tin nh·∫Øn user (kh√¥ng xo√° l·ªánh /command). 
#    Filter: ALL & ~COMMAND ƒë·ªÉ tr√°nh xo√° l·ªánh nh∆∞ /start, /clear.
async def auto_delete_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message:
        return
    try:
        await update.message.delete()
    except Exception as e:
        logger.debug("auto_delete_user: cannot delete user message: %s", e)

# 2) /clear admin: x√≥a l·ªãch s·ª≠ theo batch b·∫±ng chat.get_history()
async def clear_chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update):
        m = await update.message.reply_text("‚õî B·∫°n kh√¥ng c√≥ quy·ªÅn d√πng l·ªánh n√†y.")
        context.application.create_task(delete_after_delay(context, update.effective_chat.id, [m.message_id]))
        return

    chat = update.effective_chat
    chat_id = chat.id
    notice = await update.message.reply_text("üßπ B·∫Øt ƒë·∫ßu x√≥a tin nh·∫Øn (batch). Vui l√≤ng ch·ªù...")
    try:
        # ki·ªÉm tra quy·ªÅn bot trong group
        try:
            me = await context.bot.get_me()
            if chat.type in ("group", "supergroup"):
                bot_member = await context.bot.get_chat_member(chat_id, me.id)
                can_delete = getattr(bot_member, "can_delete_messages", False)
                if not can_delete:
                    await notice.edit_text("‚ùå Bot c·∫ßn quy·ªÅn qu·∫£n tr·ªã 'Delete messages' ƒë·ªÉ x√≥a tin nh·∫Øn trong nh√≥m. H√£y promote bot v√† b·∫≠t quy·ªÅn.")
                    context.application.create_task(delete_after_delay(context, chat_id, [notice.message_id]))
                    return
        except Exception:
            logger.debug("Could not check bot admin status (ignored)")

        deleted = 0
        batches = 0
        # m·ªói batch l·∫•y t·ªëi ƒëa 200 tin nh·∫Øn. Gi·ªõi h·∫°n batches ƒë·ªÉ tr√°nh loop v√¥ h·∫°n.
        while batches < 10:
            # l·∫•y ƒë·ªëi t∆∞·ª£ng Chat r·ªìi duy·ªát history
            chat_obj = await context.bot.get_chat(chat_id)
            msgs = []
            async for m in chat_obj.get_history(limit=200):
                msgs.append(m)
            if not msgs:
                break
            for m in msgs:
                try:
                    await context.bot.delete_message(chat_id=chat_id, message_id=m.message_id)
                    deleted += 1
                except Exception:
                    # skip message we can't delete
                    pass
            batches += 1
            if len(msgs) < 200:
                break

        done = await update.message.reply_text(f"‚úÖ Ho√†n t·∫•t: ƒë√£ c·ªë g·∫Øng x√≥a ~{deleted} tin nh·∫Øn (batch gi·ªõi h·∫°n).")
        context.application.create_task(delete_after_delay(context, chat_id, [notice.message_id, done.message_id]))
    except Exception as e:
        logger.exception("clear_chat error")
        errm = await update.message.reply_text(f"‚ö†Ô∏è L·ªói khi x√≥a: {e}")
        context.application.create_task(delete_after_delay(context, chat_id, [notice.message_id, errm.message_id]))

# 3) /testapi ƒë·ªÉ ki·ªÉm tra 3 key
async def testapi(update: Update, context: ContextTypes.DEFAULT_TYPE):
    m = await update.message.reply_text("üîé ƒêang ki·ªÉm tra API keys...")
    async def check_openai():
        if not OPENAI_API_KEY:
            return "OPENAI: ‚ùå missing"
        try:
            def sync():
                openai.api_key = OPENAI_API_KEY
                return openai.Model.list()
            await asyncio.to_thread(sync)
            return "OPENAI: ‚úÖ OK"
        except Exception as e:
            logger.exception("OpenAI test error")
            return f"OPENAI: ‚ö†Ô∏è {e}"

    async def check_grok():
        if not XAI_API_KEY:
            return "GROK: ‚ùå missing"
        try:
            def sync():
                url = "https://api.x.ai/v1/models"
                headers = {"Authorization": f"Bearer {XAI_API_KEY}"}
                r = requests.get(url, headers=headers, timeout=15)
                r.raise_for_status()
                return r.json()
            await asyncio.to_thread(sync)
            return "GROK: ‚úÖ OK"
        except Exception as e:
            logger.exception("Grok test error")
            return f"GROK: ‚ö†Ô∏è {e}"

    async def check_gemini():
        if not GOOGLE_API_KEY:
            return "GEMINI: ‚ùå missing"
        try:
            def sync():
                genai.configure(api_key=GOOGLE_API_KEY)
                model = genai.GenerativeModel("gemini-1.5-small")
                resp = model.generate_content("Hello")
                return getattr(resp, "text", str(resp))
            await asyncio.to_thread(sync)
            return "GEMINI: ‚úÖ OK"
        except Exception as e:
            logger.exception("Gemini test error")
            return f"GEMINI: ‚ö†Ô∏è {e}"

    res = await asyncio.gather(check_openai(), check_grok(), check_gemini(), return_exceptions=False)
    await m.edit_text("üîé K·∫øt qu·∫£ ki·ªÉm tra API:\n" + "\n".join(res) + "\n\n‚è≥ Tin nh·∫Øn s·∫Ω t·ª± ƒë·ªông x√≥a sau 5 ph√∫t.")
    context.application.create_task(delete_after_delay(context, update.effective_chat.id, [m.message_id]))

# 4) AI mode v√† model-select handlers
async def ai_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["ai_mode"] = None
    m = await update.message.reply_text(
        "ü§ñ ƒê√£ b·∫≠t Ch·∫ø ƒë·ªô AI\n"
        "Ch·ªçn model:\n/gpt  /grok  /gemini\n/exit ƒë·ªÉ tho√°t\n\n‚è≥ Tin nh·∫Øn s·∫Ω t·ª± ƒë·ªông x√≥a sau 5 ph√∫t."
    )
    context.application.create_task(delete_after_delay(context, update.effective_chat.id, [m.message_id]))

async def exit_ai(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["ai_mode"] = None
    m = await update.message.reply_text("‚úÖ ƒê√£ tho√°t AI mode.\n\n‚è≥ Tin nh·∫Øn s·∫Ω t·ª± ƒë·ªông x√≥a sau 5 ph√∫t.")
    context.application.create_task(delete_after_delay(context, update.effective_chat.id, [m.message_id]))

async def set_gpt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["ai_mode"] = "gpt"
    m = await update.message.reply_text("üß† Ch·ªçn ChatGPT. Nh·∫≠p n·ªôi dung ƒë·ªÉ chat. (/exit ƒë·ªÉ tho√°t)\n\n‚è≥ Tin nh·∫Øn s·∫Ω t·ª± ƒë·ªông x√≥a sau 5 ph√∫t.")
    context.application.create_task(delete_after_delay(context, update.effective_chat.id, [m.message_id]))

async def set_grok(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["ai_mode"] = "grok"
    m = await update.message.reply_text("ü¶â Ch·ªçn Grok. Nh·∫≠p n·ªôi dung ƒë·ªÉ chat. (/exit ƒë·ªÉ tho√°t)\n\n‚è≥ Tin nh·∫Øn s·∫Ω t·ª± ƒë·ªông x√≥a sau 5 ph√∫t.")
    context.application.create_task(delete_after_delay(context, update.effective_chat.id, [m.message_id]))

async def set_gemini(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["ai_mode"] = "gemini"
    m = await update.message.reply_text("üåå Ch·ªçn Gemini. Nh·∫≠p n·ªôi dung ƒë·ªÉ chat. (/exit ƒë·ªÉ tho√°t)\n\n‚è≥ Tin nh·∫Øn s·∫Ω t·ª± ƒë·ªông x√≥a sau 5 ph√∫t.")
    context.application.create_task(delete_after_delay(context, update.effective_chat.id, [m.message_id]))

# 5) X·ª≠ l√Ω tin nh·∫Øn khi ·ªü AI mode (l∆∞u text tr∆∞·ªõc khi message c√≥ th·ªÉ b·ªã x√≥a)
async def handle_ai_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    mode = context.user_data.get("ai_mode")
    if not mode:
        return

    if not update.message:
        return
    text = (update.message.text or "").strip()
    if not text:
        return
    thinking = await update.message.reply_text("‚è≥ ƒêang suy nghƒ©...")
    # c·ªë g·∫Øng x√≥a tin user (n·∫øu ch∆∞a b·ªã auto handler x√≥a)
    try:
        await update.message.delete()
    except Exception:
        pass

    if mode == "gpt":
        reply = await chat_gpt_async(text)
    elif mode == "grok":
        reply = await chat_grok_async(text)
    elif mode == "gemini":
        reply = await chat_gemini_async(text)
    else:
        reply = "‚ö†Ô∏è Ch∆∞a ch·ªçn model AI."

    final = await thinking.edit_text(reply + "\n\n‚è≥ Tin nh·∫Øn s·∫Ω t·ª± ƒë·ªông x√≥a sau 5 ph√∫t.")
    context.application.create_task(delete_after_delay(context, update.effective_chat.id, [final.message_id]))

# 6) start/help
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    m = await update.message.reply_text(
        "‚ú® Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi BOT\n\n"
        "L·ªánh: /ai /gpt /grok /gemini /exit /testapi /clear\n"
        "Ghi ch√∫: Tin nh·∫Øn user s·∫Ω b·ªã x√≥a NGAY. Tin nh·∫Øn bot s·∫Ω t·ª± ƒë·ªông x√≥a sau 5 ph√∫t."
    )
    context.application.create_task(delete_after_delay(context, update.effective_chat.id, [m.message_id]))

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    m = await update.message.reply_text(
        "üìñ Danh s√°ch l·ªánh:\n"
        "/start /help /ai /gpt /grok /gemini /exit /testapi /clear\n\n"
        "‚è≥ Tin nh·∫Øn bot s·∫Ω t·ª± ƒë·ªông x√≥a sau 5 ph√∫t."
    )
    context.application.create_task(delete_after_delay(context, update.effective_chat.id, [m.message_id]))

# -------------------
# main
# -------------------
def main():
    if not TOKEN:
        logger.error("TOKEN ch∆∞a ƒë∆∞·ª£c ƒë·∫∑t. ƒê·∫∑t bi·∫øn m√¥i tr∆∞·ªùng TOKEN ho·∫∑c upload TOKEN.txt v√†o /mnt/data.")
        sys.exit(1)

    app = Application.builder().token(TOKEN).build()

    # 1) auto delete user messages (non-command) - x·ª≠ l√Ω tr∆∞·ªõc ƒë·ªÉ xo√° user ngay
    app.add_handler(MessageHandler(filters.ALL & ~filters.COMMAND, auto_delete_user), group=0)

    # AI & command handlers
    app.add_handler(CommandHandler("ai", ai_mode))
    app.add_handler(CommandHandler("exit", exit_ai))
    app.add_handler(CommandHandler("gpt", set_gpt))
    app.add_handler(CommandHandler("grok", set_grok))
    app.add_handler(CommandHandler("gemini", set_gemini))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_ai_message))

    # Tools / admin
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("testapi", testapi))
    app.add_handler(CommandHandler("clear", clear_chat))

    logger.info("ü§ñ Bot ƒëang ch·∫°y...")
    app.run_polling()

if __name__ == "__main__":
    main()
